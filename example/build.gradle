apply plugin: 'android'

apply plugin: 'android-apt'

repositories {
    mavenCentral()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "1.0 SD"
}

android {

    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_COMPILE_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
    }

    lintOptions {
        abortOnError Boolean.parseBoolean(project.ABORT_ON_ERROR)
    }

    signingConfigs { release }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        dev {
            versionName computeVersionName("dev")
            applicationId 'org.wallpaper.release'
            signingConfig signingConfigs.release
        }
        releasesprod {
            versionName computeVersionName("")
            applicationId 'org.wallpaper.release'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile libraries.android_support
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.squareup.picasso:picasso:2.3.3'
    compile 'com.jakewharton:butterknife:5.1.2'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile project(':library')

    compile 'com.parse.bolts:bolts-tasks:1.4.0'

    compile 'com.github.hotchemi:permissionsdispatcher:2.0.7'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:2.0.7'
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}


